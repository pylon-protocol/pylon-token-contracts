{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "title": "Description",
      "description": "This instruction executes strategy of Pylon Treasury.\n\n### Overview of execution 1. Sweeps all UST in collector contract 2. Executes [`ExecuteMsg::HarvestInternal`] message\n\n## Example ```typescript { \"harvest\": {} } ```",
      "type": "object",
      "required": [
        "harvest"
      ],
      "properties": {
        "harvest": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "This instruction executes internal operation of Pylon Treasury's strategy\n\n### Overview of execution 1. Check contract balance 2. Execute strategy messages. * Step 1: [`ExecuteMsg::StrategyAnchor`] * Step 2: [`ExecuteMsg::StrategyProvideLiquidity`] * Step 3: [`ExecuteMsg::StrategyBuyback`]\n\n## Example ```typescript { \"harvest_internal\": {} } ```",
      "type": "object",
      "required": [
        "harvest_internal"
      ],
      "properties": {
        "harvest_internal": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "This instruction executes step 1 of strategy: Deposit ust to anchor\n\n## Example ```typescript { \"strategy_anchor\": { \"amount\": \"10000000\" // amount in UST } } ```",
      "type": "object",
      "required": [
        "strategy_anchor"
      ],
      "properties": {
        "strategy_anchor": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "This instruction executes step 2 of strategy: Provide mine-ust liquidity\n\n## Example ```typescript { \"strategy_provide_liquidity: { \"amount\": \"1000000000\" // amount in UST } } ```",
      "type": "object",
      "required": [
        "strategy_provide_liquidity"
      ],
      "properties": {
        "strategy_provide_liquidity": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "This instruction executes step 3 of strategy: Run buyback logic\n\n## Example ```typescript { \"strategy_buyback\": { \"amount\": \"10000000000\" // amount in UST } } ```",
      "type": "object",
      "required": [
        "strategy_buyback"
      ],
      "properties": {
        "strategy_buyback": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "This instruction executes withdraw operation.\n\n## Example ```typescript { \"withdraw\": { \"info\": { // option 1: cw20 \"token\": { \"contract_addr\": \"terra1...\" } // option 2: native \"native_token\": { \"denom\": \"uusd\" } }, \"amount\": \"100000000\" } } ```",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "target"
          ],
          "properties": {
            "target": {
              "$ref": "#/definitions/Asset"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "title": "Description",
      "description": "This enum describes a Terra asset (native or CW20).",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "A token amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Information about an asset stored in a [`AssetInfo`] struct",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      }
    },
    "AssetInfo": {
      "title": "Description",
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"terra...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
